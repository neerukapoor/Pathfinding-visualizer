#include <iostream>
#include <math.h>
#include <stack>
#include <string.h>
#include <vector>
#include <algorithm>
using namespace std;

int ep,sx,sy,ex,ey,vis[10][10],pred[10][10];
vector<int>path;

void display(int a,int b)
{
    int k=1;
    for(int i=0;i<10000;i++)
    {
        for(int j=0;j<1000;j++)
        {
            
        }
    }
    cout<<"\033[2J\033[5;0H";
    for(int i=0;i<10;i++)
    {
        for(int j=0;j<10;j++)
        {
            if(i==sx && j==sy)
                cout<<"S  ";
            else if(i==ex && j==ey)
                cout<<"E  ";
            else if(vis[i][j]==2)
                cout<<"-  ";
            else if(vis[i][j]==-1)
                cout<<"@  ";
            else if(vis[i][j]==1)
                cout<<"*  ";
            else
            {
                cout<<k<<" ";
                if(i==0)
                    cout<<" ";
            }
            k++;
        }
        cout<<endl;
    }
}

int dist(int a,int b,int c,int d)
{
    int x=abs(c-a)+abs(d-b);
    return x;
}

int check(int a,int b)
{
    if(a>=0 && a<10 && b>=0 && b<10)
        return 1;
    return 0;
}

int best_fs()
{
    if(!dist(sx,sy,ex,ey))
        return 0;
    else
    {
        stack<pair<int,int>>s;
        s.push({sx,sy});
        pair<int,int>p;
        vector<pair<int,pair<int,int>>>v;
        vis[sx][sy]=1;
        pred[sx][sy]=-1;
        while(!s.empty())
        {
            v.clear();
            p=s.top();
            if(p.first==ex && p.second==ey)
                return 1;
            s.pop();
            display(p.first,p.second);
            if(check(p.first-1,p.second) && vis[p.first-1][p.second]==0)
            {
                vis[p.first-1][p.second]=1;
                int x=dist(p.first-1,p.second,ex,ey);
                v.push_back({x,{p.first-1,p.second}});
                pred[p.first-1][p.second]=(p.first*10)+(p.second+1);
            }
            if(check(p.first,p.second+1) && vis[p.first][p.second+1]==0)
            {
                vis[p.first][p.second+1]=1;
                int x=dist(p.first,p.second+1,ex,ey);
                v.push_back({x,{p.first,p.second+1}});
                pred[p.first][p.second+1]=(p.first*10)+(p.second+1);
            }
            if(check(p.first+1,p.second) && vis[p.first+1][p.second]==0)
            {
                vis[p.first+1][p.second]=1;
                int x=dist(p.first+1,p.second,ex,ey);
                v.push_back({x,{p.first+1,p.second}});
                pred[p.first+1][p.second]=(p.first*10)+(p.second+1);
            }
            if(check(p.first,p.second-1) && vis[p.first][p.second-1]==0)
            {
                vis[p.first][p.second-1]=1;
                int x=dist(p.first,p.second-1,ex,ey);
                v.push_back({x,{p.first,p.second-1}});
                pred[p.first][p.second-1]=(p.first*10)+(p.second+1);
            }
            sort(v.begin(),v.end());
            for(int i=v.size()-1;i>=0;i--)
            {
                s.push({v[i].second.first,v[i].second.second});
            }
        }
        return 0;
    }
    
}

int main()
{
    char ch;
    int k,sp,wall,x,y,q,w;
    k=1;
    for(int i=0;i<10;i++)
    {
        for(int j=0;j<10;j++)
        {
            if(i==0)
                cout<<k<<"  ";
            else 
                cout<<k<<" ";
            k=k+1;
        }
        cout<<endl;
    }
    cout<<"Enter starting and ending point ";
    cin>>sp>>ep;
    sx=sp/10;
    sy=(sp%10)-1;
    if(sy<0)
    {
        sy=9;
        sx=sx-1;
    }
    ex=ep/10;
    ey=(ep%10)-1;
    if(ey<0)
    {
        ey=9;
        ex=ex-1;
    }
    memset(vis,0,sizeof(vis));
    cout<<"Do you want to add walls? Press y/n ";
    cin>>ch;
    if(ch=='y' || ch=='Y')
    {
        cout<<"Enter walls number (to stop press 'enter') ";
        while(1)
        {
            cin>>wall;
            x=wall/10;
            y=(wall%10)-1;
            if(y<0)
            {
                y=9;
                x=x-1;
            }
            vis[x][y]=-1;
            if(cin.get()=='\n')
                break;
        }
    }
    if(!best_fs())
        cout<<"Not found ";
    else
    {
        pair<int,int>last;
        last.first=ex;
        last.second=ey;
        path.push_back(ep);
        while(pred[last.first][last.second]!=-1)
        {
            path.push_back(pred[last.first][last.second]);
            int var=last.first;
            last.first=(pred[last.first][last.second]/10);
            last.second=(pred[var][last.second]%10)-1;
            if(last.second<0)
            {
                last.second=9;
                last.first=last.first-1;
            }
        }
        for(int i=path.size()-1;i>0;i--)
        {
            q=path[i]/10;
            w=(path[i]%10)-1;
            if(w<0)
            {
                w=9;
                q=q-1;
            }
            vis[q][w]=2;
            display(-1,-1);
        }
        cout<<endl;
        cout<<"Path is ";
        for(int i=path.size()-2;i>=0;i--)
        {
            cout<<path[i]<<" ";
        }
    }
    return 0;
}
