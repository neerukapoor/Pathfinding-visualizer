#include <bits/stdc++.h>

using namespace std;

int mat[11][11],dist[11][11],pred[11][11],v,vis[11][11],q,w;
vector<int>path;

void display(int sx,int sy,int ex,int ey)
{
    int k=1;
    for(int i=0;i<10000;i++)
    {
        for(int j=0;j<1000;j++)
        {
            
        }
    }
    cout<<"\033[2J\033[5;0H";
    for(int i=0;i<10;i++)
    {
        for(int j=0;j<10;j++)
        {
            if(vis[i][j]==2)
                cout<<"-  ";
            else if(i==sx && j==sy)
                cout<<"S  ";
            else if(i==ex && j==ey)
                cout<<"E  ";
            else if(vis[i][j]==1)
                cout<<"*  ";
            else if(vis[i][j]==-1)
                cout<<"@  ";
            else
            {
                cout<<k<<" ";
                if(i==0)
                    cout<<" ";
            }
            k=k+1;
        }
        cout<<endl;
    }
}

int check(int x,int y)
{
    if(x>=0 && x<10 && y>=0 && y<10)
        return 1;
    return 0;
}

int bfs(int sx,int sy,int ex,int ey)
{
    queue<pair<int,int>>q;
    for(int i=0;i<10;i++)
    {
        for(int j=0;j<10;j++)
        {
            dist[i][j]=INT_MAX;
            pred[i][j]=-1;
        }
    }
    dist[sx][sy]=0;
    vis[sx][sy]=1;
    display(sx,sy,ex,ey);
    pred[sx][sy]=-1;
    q.push({sx,sy});
    while(!q.empty())
    {
        pair<int,int>u=q.front();
        q.pop();
        if(u.first==ex && u.second==ey)
            return 1;
        else
        {
            if(check(u.first-1,u.second) && vis[u.first-1][u.second]==0)
            {
                vis[u.first-1][u.second]=1;
                q.push({u.first-1,u.second});
                dist[u.first-1][u.second]=dist[u.first][u.second]+1;
                pred[u.first-1][u.second]=(u.first*10)+(u.second+1);
                display(sx,sy,ex,ey);
                if(u.first-1==ex && u.second==ey)
                    return 1;
            }
            if(check(u.first,u.second+1) && vis[u.first][u.second+1]==0)
            {
                vis[u.first][u.second+1]=1;
                q.push({u.first,u.second+1});
                dist[u.first][u.second+1]=dist[u.first][u.second]+1;
                pred[u.first][u.second+1]=(u.first*10)+(u.second+1);
                display(sx,sy,ex,ey);
                if(u.first==ex && u.second+1==ey)
                    return 1;
            }
            if(check(u.first+1,u.second) && vis[u.first+1][u.second]==0)
            {
                vis[u.first+1][u.second]=1;
                q.push({u.first+1,u.second});
                dist[u.first+1][u.second]=dist[u.first][u.second]+1;
                pred[u.first+1][u.second]=(u.first*10)+(u.second+1);
                display(sx,sy,ex,ey);
                if(u.first+1==ex && u.second==ey)
                    return 1;
            }
            if(check(u.first,u.second-1) && vis[u.first][u.second-1]==0)
            {
                vis[u.first][u.second-1]=1;
                q.push({u.first,u.second-1});
                dist[u.first][u.second-1]=dist[u.first][u.second]+1;
                pred[u.first][u.second-1]=(u.first*10)+(u.second+1);
                display(sx,sy,ex,ey);
                if(u.first==ex && u.second-1==ey)
                    return 1;
            }
        }
    }
    return 0;
}

int main()
{
    int e,x,y,sx,sy,ex,ey,sp,ep,k=1,var,wall,count=0;
    char ch;
    memset(mat,0,sizeof(mat));
    for(int i=0;i<10;i++)
    {
        for(int j=0;j<10;j++)
        {
            vis[i][j]=0;
        }
    }
    path.clear();
    for(int i=0;i<10;i++)
    {
        for(int j=0;j<10;j++)
        {
            cout<<k<<" ";
            if(i==0)
                cout<<" ";
            k++;
        }
        cout<<endl;
    }
    cout<<"Enter starting point and ending point on graph ";
    cin>>sp>>ep;
    cout<<"Do you want to add walls? Press y/n ";
    cin>>ch;
    if(ch=='y' || ch=='Y')
    {
        cout<<"Enter walls number (to stop press 'enter') ";
        while(1)
        {
            cin>>wall;
            x=wall/10;
            y=(wall%10)-1;
            if(y<0)
            {
                y=9;
                x=x-1;
            }
            vis[x][y]=-1;
            if(cin.get()=='\n')
                break;
        }
    }
    sx=sp/10;
    sy=(sp%10)-1;
    if(sy<0)
    {
        sy=9;
        sx=sx-1;
    }
    ex=ep/10;
    ey=(ep%10)-1;
    if(ey<0)
    {
        ey=9;
        ex=ex-1;
    }
    if(bfs(sx,sy,ex,ey)==0)
    {
        cout<<"No ";
    }
    else
    {
        pair<int,int>last;
        last.first=ex;
        last.second=ey;
        path.push_back(ep);
        while(pred[last.first][last.second]!=-1)
        {
            path.push_back(pred[last.first][last.second]);
            var=last.first;
            last.first=(pred[last.first][last.second]/10);
            last.second=(pred[var][last.second]%10)-1;
            if(last.second<0)
            {
                last.second=9;
                last.first=last.first-1;
            }
        }
        for(int i=path.size()-2;i>=1;i--)
        {
            q=path[i]/10;
            w=(path[i]%10)-1;
            if(w<0)
            {
                w=9;
                q=q-1;
            }
            vis[q][w]=2;
            display(sx,sy,ex,ey);
        }
        cout<<endl<<"Shortest length is "<<dist[ex][ey]<<endl;
        cout<<"Path is: ";
        for(int i=path.size()-2;i>=0;i--)
            cout<<path[i]<<" ";
        cout<<endl;
    }
    return 0;
}